import moment from"moment";import"moment-timezone";let airspaceClickHandler=null;function fetchAirspacesXC(){if(!window.map)return void console.error("Map not initialized yet");const e=window.map.getCenter(),t=(e.lat.toFixed(6),e.lng.toFixed(6),window.map.getBounds()),r=t.getNorthWest(),i=t.getSouthEast(),n=new Date,o=`${n.getFullYear()}-${(n.getMonth()+1).toString().padStart(2,"0")}-${n.getDate().toString().padStart(2,"0")}`,a=`${process.env.APP_DOMAIN}/api/airspacesXCdb?startDate=${o}&nw_lat=${r.lat.toFixed(6)}&nw_lng=${r.lng.toFixed(6)}&se_lat=${i.lat.toFixed(6)}&se_lng=${i.lng.toFixed(6)}`;fetch(a).then((e=>e.json())).then((e=>{window.airspaceXC.clearLayers();const t=[];airspaceClickHandler&&(window.map.off("click",airspaceClickHandler),airspaceClickHandler=null);const r=e.features||[],i=new Date;console.log("Current date for expiration checks:",i);const n=Intl.DateTimeFormat().resolvedOptions().timeZone,o=moment.tz(n).zoneAbbr();console.log(o),r.forEach((e=>{if(e.geometry&&"Polygon"===e.geometry.type){if(e.properties.name&&e.properties.name.startsWith("V00"))return;if(e.properties.descriptions&&Array.isArray(e.properties.descriptions)&&e.properties.descriptions.length>0){let t=!1;for(const r of e.properties.descriptions){const n=(r.airdescription||"").match(/C\)\s*(\d{10})/);if(n&&n[1]){const r=n[1];try{const n=2e3+parseInt(r.substring(0,2)),o=parseInt(r.substring(2,4))-1,a=parseInt(r.substring(4,6)),s=parseInt(r.substring(6,8)),p=parseInt(r.substring(8,10)),c=new Date(n,o,a,s,p);if(console.log(`Airspace ${e.properties.name} has expiration date: ${c}`),c<=i){console.log(`Airspace ${e.properties.name} is expired`),t=!0;break}}catch(e){console.error("Error parsing expiration date:",e)}}}if(t)return}const r=parseInt(document.getElementById("airspaceLowerLimit").value,10),n=e.properties.airlower_j;if(!n)return;let o=null;if(("AMSL"===n.type||"FL"===n.type||"AGL"===n.type)&&(o=.3048*n.height),null===o||o>=r)return;const a=e.geometry.coordinates[0].map((e=>[e[1],e[0]])),s=L.polygon(a,{color:e.properties.strokeColor||"blue",weight:e.properties.strokeWeight||2,fillColor:e.properties.fillColor||"blue",fillOpacity:e.properties.fillOpacity||.3});t.push({polygon:s,data:e.properties}),window.airspaceXC.addLayer(s)}})),console.log(`Added ${t.length} airspaces to the map`),airspaceClickHandler=function(e){if(!window.map.hasLayer(window.airspaceXC))return;const r=e.latlng,i=[];if(t.forEach((({polygon:e,data:t})=>{e.getBounds().contains(r)&&i.push(t)})),i.length>0){const e=moment.tz.guess(),t=`<div class="timezone-info" style="margin-top: 5px; font-size: 0.85em;">Local timezone: ${moment.tz(e).zoneAbbr()} (UTC${moment.tz(e).format("Z")})</div>`,n=i.map((e=>{let r="";if(e.descriptions&&Array.isArray(e.descriptions)&&e.descriptions.length>0){const t=e=>e?e.replace(/([ABCDEFGQ]\))/g,"<br>$1"):"";r=`\n                  <div class="airspace-descriptions" style="font-size: 0.8em;">\n                      ${e.descriptions.map((e=>`${t(e.airdescription||"")} ${e.airlanguage?`(${e.airlanguage})`:""}`)).join("")}\n                  </div>\n                `}let i="";return e.activations&&Array.isArray(e.activations)&&e.activations.length>0&&(i=`\n                  <div class="airspace-activations">\n                    <b>Activations:</b><br>\n                    ${e.activations.map((e=>{const t=new Date(e[0]),r=new Date(e[1]),i=e=>e.toLocaleString("en-US",{month:"short",day:"numeric",hour:"2-digit",minute:"2-digit",hour12:!1});return`${i(t)} - ${i(r)}`})).join("<br>")}\n                  </div>\n                `),`\n              <b>${e.name} (${e.airspaceClass})</b><br>\n              <b>↧ </b>${e.lowerLimit} - <b>↥ </b>${e.upperLimit}<br>\n              ${t}\n              </div>\n                ${r}\n                ${i}\n              </div>\n              `})).join("<hr style='margin: 3px 0;'>");L.popup().setLatLng(r).setContent(n).openOn(window.map)}},window.map.on("click",airspaceClickHandler)})).catch((e=>console.error("Error fetching airspaces:",e)))}window.fetchAirspacesXC=fetchAirspacesXC;