function getCompassDirection(t){return["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW"][Math.round(t/22.5)%16]}function getFillColor(t){return t>=7&&t<=14?"LimeGreen":t>=15&&t<=24?"yellow":t>=25&&t<=30?"orange":t>=31&&t<=36?"red":t>36?"black":"Aquamarine"}function getStrokeColor(t){return t>=15&&t<=24?"LimeGreen":t>=25&&t<=32?"yellow":t>=33&&t<=38?"orange":t>=39&&t<=44?"red":t>44?"black":"Aquamarine"}function getTextColor(t){return"black"===t?"white":"black"}function processHistoricalData(t){const e={};t.forEach((t=>{const n=new Date(1e3*t._id);n.setMinutes(10*Math.floor(n.getMinutes()/10)),n.setSeconds(0),n.setMilliseconds(0);const o=n.getTime();e[o]||(e[o]={count:0,wAvgSum:0,wMaxSum:0,wDirSum:0,tempSum:0,tempCount:0}),e[o].count++,e[o].wAvgSum+=t["w-avg"],e[o].wMaxSum+=t["w-max"],e[o].wDirSum+=t["w-dir"],void 0!==t.temp&&(e[o].tempSum+=t.temp,e[o].tempCount++)}));const n=Object.keys(e).map((t=>({_id:parseInt(t)/1e3,"w-avg":e[t].wAvgSum/e[t].count,"w-max":e[t].wMaxSum/e[t].count,"w-dir":e[t].wDirSum/e[t].count,temp:e[t].tempCount>0?e[t].tempSum/e[t].tempCount:void 0})));return n.sort(((t,e)=>e._id-t._id)),n}function fetchWindStations(){if(!window.map||"function"!=typeof window.map.getBounds)return void console.error("Map not properly initialized");const t=window.map.getBounds(),e=t.getNorthWest().lat,n=t.getNorthWest().lng,o=t.getSouthEast().lat,a=t.getSouthEast().lng;fetch(`${process.env.APP_DOMAIN}/api/wind-data-getCurrent?nwLat=${e}&nwLng=${n}&seLat=${o}&seLng=${a}`).then((t=>t.json())).then((t=>{if(!Array.isArray(t))throw new Error("Invalid data format received from API");windLayer.clearLayers(),console.log("Wind layers cleared"),t.forEach((t=>{const[e,n]=t.loc.coordinates,o=t.last["w-dir"],a=t.last["w-avg"],i=t.last["w-max"],s=(t.last.temp,getCompassDirection(o)),r=new Date(1e3*t.last._id).toLocaleTimeString("de-DE",{hour:"2-digit",minute:"2-digit"}),d=getFillColor(a),l=getStrokeColor(i),c=t.peak?"▲":"▼",m=t._id.includes("holfuy");let h="";m&&(h=t._id.split("-")[1]);const g=`\n          <svg width="30" height="30" viewBox="0 0 800 900" xmlns="http://www.w3.org/2000/svg">\n            <g transform="rotate(${o+90}, 400, 400)" stroke="${l}" stroke-width="60">\n              <path d="M203,391 L75,144 L738,391 L75,637 L203,391 Z" fill="${d}"/>\n            </g>\n            <text x="330" y="850" font-size="220" text-anchor="middle" fill="black" font-weight="bold">\n              ${c}${Math.round(a)} / ${Math.round(i)}\n            </text>\n          </svg>`,p=L.divIcon({className:"wind-arrow",html:g,iconSize:[30,30],iconAnchor:[12,15]}),u=L.marker([n,e],{icon:p}).addTo(windLayer);fetch(`https://winds.mobi/api/2.3/stations/${t._id}/historic/?duration=21000&keys=w-dir&keys=w-avg&keys=w-max&keys=temp`).then((t=>t.json())).then((e=>{const n=processHistoricalData(e),d=Date.now()-18e6,l=n.filter((t=>1e3*t._id>=d));let c='<table border="1" style="border-collapse: collapse; width: 100%; text-align: center;">\n              <thead>\n                <tr>\n                  <th>Wind (m/s)</th>\n                  <th>Gusts (m/s)</th>\n                  <th>Direction</th>\n                  <th>Temp C°</th>\n                  <th>Time</th>\n                </tr>\n              </thead>\n              <tbody>';l.forEach((t=>{const e=new Date(1e3*t._id).toLocaleTimeString("de-DE",{hour:"2-digit",minute:"2-digit"}),n=getCompassDirection(t["w-dir"]);c+=`<tr>\n                <td style="color: ${getTextColor(getFillColor(t["w-avg"]))}; background-color: ${getFillColor(t["w-avg"])};">\n                  ${t["w-avg"].toFixed(1)}\n                </td>\n                <td style="color: ${getTextColor(getStrokeColor(t["w-max"]))}; background-color: ${getStrokeColor(t["w-max"])};">\n                  ${t["w-max"].toFixed(1)}\n                </td>\n                <td>\n                  <span style="display: inline-block; transform: rotate(${t["w-dir"]+180}deg);"><strong>⬆ </strong></span>\n                  ${n}\n                </td>\n                <td>${void 0!==t.temp?t.temp.toFixed(1):"N/A"}</td>\n                <td>${e}</td>\n              </tr>`})),c+="</tbody></table>";const g=n.slice().reverse(),p=`\n              <div style="display: flex; gap: 1px; align-items: flex-start;">\n                <div style="flex: 1;">\n                  <strong>${t.short}</strong><br><br>\n                  <tag-name style="white-space:pre">Wind Speed:&#9;&#9;${a} km/h<br></tag-name>\n                  <tag-name style="white-space:pre">Max Wind:&#9;&#9;${i} km/h<br></tag-name>\n                  <tag-name style="white-space:pre">Wind Direction:&#9;${o}° (${s})<br></tag-name>\n                  <tag-name style="white-space:pre">Last Update:&#9;&#9;${r}<br><br></tag-name>\n                </div>\n                ${m?`\n                  <div style="flex: 0 0 auto; width: 110px;">\n                    <iframe src="https://widget.holfuy.com/?station=${h}&su=km/h&t=C&lang=en&mode=rose&size=110"\n                      width="160"\n                      height="110"\n                      frameborder="0"\n                      scrolling="no">\n                    </iframe>\n                  </div>\n                `:""}\n              </div>\n              \n              <div class="tab-container">\n                <div class="tab active" onclick="showTab('table-${t._id}', this)">Table</div>\n                <div class="tab" onclick="showTab('chart-${t._id}', this)">Chart</div>\n                <div class="tab" id="camera-tab-${t._id}" style="display: none;" onclick="showTab('camera-${t._id}', this)">Camera</div>\n              </div>\n              <div id="table-${t._id}" class="tab-content">\n                ${c}\n              </div>\n              <div id="chart-${t._id}" class="tab-content" style="display: none;">\n                <canvas id="canvas-${t._id}" width="400" height="200"></canvas>\n              </div>\n              <div id="camera-${t._id}" class="tab-content" style="display: none;">\n                <img id="camera-image-${t._id}" src="" alt="Camera Image" style="width: 100%; height: auto;">\n              </div>\n            `;u.bindPopup(L.responsivePopup({hasTip:!0,autoPan:!1,offset:[15,25],maxWidth:560,maxHeight:800}).setContent(p)),u.on("popupopen",(()=>{setTimeout((()=>{const e=document.getElementById(`canvas-${t._id}`);if(e){e.style.height="300px";const t=e.getContext("2d");if(t){const n=g.map((t=>({x:1e3*t._id,y:t["w-avg"]}))),o=g.map((t=>({x:1e3*t._id,y:t["w-max"]}))),a=new Chart(t,{type:"line",data:{datasets:[{label:"Wind Avg (km/h)",data:n,borderColor:"blue",fill:!1,pointRadius:3},{label:"Wind Max (km/h)",data:o,borderColor:"red",fill:!1,pointRadius:3}]},options:{responsive:!0,maintainAspectRatio:!1,layout:{padding:{bottom:5}},scales:{x:{type:"time",time:{unit:"hour",displayFormats:{hour:"HH:mm"},tooltipFormat:"HH:mm"},grid:{drawBorder:!0},ticks:{autoSkip:!0,maxRotation:0,minRotation:0,padding:30}},y:{beginAtZero:!0,ticks:{stepSize:10,maxTicksLimit:10,font:{size:14}}}},plugins:{legend:{display:!1}}},plugins:[{id:"windDirectionArrows",afterDraw:t=>{const e=t.ctx,n=t.scales.x;e.save();const o=n.top+20;e.textAlign="center",e.textBaseline="middle",g.forEach((t=>{const a=n.getPixelForValue(1e3*t._id);e.save(),e.translate(a,o),e.rotate((t["w-dir"]+180)*Math.PI/180),e.font="18px Arial",e.fillText("⬆",0,0),e.restore()})),e.restore()}}]});e.chartInstance=a}else console.error("Failed to get 2D context from canvas.")}else console.error("Canvas element not found.");if(t._id.includes("holfuy")){const e=`https://holfuy.com/en/takeit/cam/s${t._id.split("-")[1]}.jpg`,n=document.getElementById(`camera-image-${t._id}`),o=document.getElementById(`camera-tab-${t._id}`),a=new Image;a.onload=function(){n.src=e,o.style.display="block"},a.onerror=function(){o.style.display="none"},a.src=e,setTimeout((()=>{a.complete&&0!==a.naturalWidth||(o.style.display="none")}),2e3)}}),500)}))})).catch((t=>console.error("Error fetching historical wind data:",t)))}))})).catch((t=>console.error("Error fetching wind station data:",t)))}window.showTab=function(t,e){console.log("Switching to tab:",t),document.querySelectorAll(".tab-content").forEach((t=>{t.style.display="none"})),document.querySelectorAll(".tab").forEach((t=>{t.classList.remove("active")}));const n=document.getElementById(t);if(n?n.style.display="block":console.error("Tab not found:",t),e?e.classList.add("active"):console.error("Element is null or undefined"),t.startsWith("chart-")){const e=t.split("chart-")[1];console.log("Station ID:",e);const n=document.getElementById(`canvas-${e}`);n?(console.log("Canvas found:",n),n.chartInstance?(console.log("Updating chart..."),n.chartInstance.resize(),n.chartInstance.update()):console.warn("Chart instance not found on canvas:",n)):console.error("Canvas not found for station ID:",e)}},window.fetchWindStations=fetchWindStations;