import moment from"moment";import"moment-timezone";import*as turf from"@turf/turf";let airspaceDebounceTimer,airspaceClickHandler=null,currentLowerLimit=3e3,selectedDateStr=getCurrentDateStr();function getCurrentDateStr(){const e=new Date;return`${e.getFullYear()}-${(e.getMonth()+1).toString().padStart(2,"0")}-${e.getDate().toString().padStart(2,"0")}`}function getLimitMeters(e){if(!e)return null;switch(e.type){case"FL":case"AMSL":case"AGL":return.3048*e.height;default:return null}}function fetchAirspacesXC(){if(!window.map)return void console.error("Map not initialized yet");const e=window.map.getCenter(),t=(e.lat.toFixed(6),e.lng.toFixed(6),window.map.getBounds()),r=t.getNorthWest(),i=t.getSouthEast(),o=`/api/airspacesXCdb?startDate=${selectedDateStr}&nw_lat=${r.lat.toFixed(6)}&nw_lng=${r.lng.toFixed(6)}&se_lat=${i.lat.toFixed(6)}&se_lng=${i.lng.toFixed(6)}`;fetch(o).then((e=>e.json())).then((e=>{window.airspaceXC.clearLayers();const t=[];airspaceClickHandler&&(window.map.off("click",airspaceClickHandler),airspaceClickHandler=null);const r=e.features||[];let i=[],o=[];const n=Intl.DateTimeFormat().resolvedOptions().timeZone,a=moment.tz(selectedDateStr,"YYYY-MM-DD",n).startOf("day").utc().toDate();r.forEach((e=>{if(e.geometry&&"Polygon"===e.geometry.type){if(e.properties.name&&e.properties.name.startsWith("V00"))return;const r=getLimitMeters(e.properties.airlower_j);if(null===r||r>currentLowerLimit)return void i.push({name:e.properties.name,limit:r});o.push({name:e.properties.name,limit:r});let n=!1;if(e.properties.descriptions&&Array.isArray(e.properties.descriptions))for(const t of e.properties.descriptions){const e=(t.airdescription||"").match(/C\)\s*(\d{10})/);if(e&&e[1]){const t=e[1];try{const e=2e3+parseInt(t.substring(0,2)),r=parseInt(t.substring(2,4))-1,i=parseInt(t.substring(4,6)),o=parseInt(t.substring(6,8)),s=parseInt(t.substring(8,10));if(new Date(Date.UTC(e,r,i,o,s))<a){n=!0;break}}catch(e){console.error("Error parsing expiration date:",e)}}}if(n)return;let s=!1;if(e.properties.activations&&Array.isArray(e.properties.activations)&&e.properties.activations.length>0){const t=Intl.DateTimeFormat().resolvedOptions().timeZone,r=moment.tz(selectedDateStr,"YYYY-MM-DD",t).endOf("day").utc().toDate();for(const t of e.properties.activations){const e=new Date(t[0]),i=new Date(t[1]);if(e<=r&&i>=a){s=!0;break}}if(!s)return}if("R"===e.properties.airspaceClass){let t=!1;if(e.properties.descriptions&&Array.isArray(e.properties.descriptions))for(const r of e.properties.descriptions){if((r.airdescription||"").match(/C\)\s*(\d{10})/)){t=!0;break}}if(!t&&!s)return}const p=e.geometry.coordinates[0].map((e=>[e[1],e[0]])),c=L.polygon(p,{color:e.properties.strokeColor||"blue",weight:e.properties.strokeWeight||2,fillColor:e.properties.fillColor||"blue",fillOpacity:e.properties.fillOpacity||.3});c.bindPopup((()=>{const t=moment.tz.guess(),r=`<div class="timezone-info" style="margin-top: 5px; font-size: 0.85em;">Local timezone: ${moment.tz(t).zoneAbbr()} (UTC${moment.tz(t).format("Z")})</div>`;let i="";if(e.properties.descriptions&&Array.isArray(e.properties.descriptions)&&e.properties.descriptions.length>0){const t=e=>e?e.replace(/([ABCDEFGQ]\))/g,"<br>$1"):"";i=`\n                  <div class="airspace-descriptions" style="font-size: 0.8em;">\n                      ${e.properties.descriptions.map((e=>`${t(e.airdescription||"")} ${e.airlanguage?`(${e.airlanguage})`:""}`)).join("")}\n                  </div>\n                `}let o="";e.properties.activations&&Array.isArray(e.properties.activations)&&e.properties.activations.length>0&&(o=`\n                  <div class="airspace-activations">\n                    <b>Activations:</b><br>\n                    ${e.properties.activations.map((e=>{const r=moment.utc(e[0]).tz(t),i=moment.utc(e[1]).tz(t);return`${r.format("MMM D, HH:mm z")} - ${i.format("MMM D, HH:mm z")}`})).join("<br>")}\n                  </div>\n                `);const n=(e,t)=>{if(!e)return t||"N/A";const r=e.type,i=e.height;if("FL"===r){return`${Math.round(.3048*i)}m (FL${i/100})`}if("AMSL"===r||"AGL"===r){return`${Math.round(.3048*i)}m`}return t||"N/A"},a=n(e.properties.airlower_j,e.properties.lowerLimit),s=n(e.properties.airupper_j,e.properties.upperLimit);return`\n              <b>${e.properties.name} (${e.properties.airspaceClass})</b><br>\n              <b>↧ </b>${a} - <b>↥ </b>${s}<br>\n              ${i}\n              ${o}\n              ${r}\n              `}),{className:"airspace-popup"}),t.push({polygon:c,data:e.properties,geometry:e.geometry}),window.airspaceXC.addLayer(c)}})),airspaceClickHandler=function(e){if(!window.map.hasLayer(window.airspaceXC))return;const r=e.latlng,i=[],o=turf.point([r.lng,r.lat]);if(t.forEach((({polygon:e,data:t,geometry:r})=>{try{const e=turf.polygon(r.coordinates);turf.booleanPointInPolygon(o,e)&&i.push(t)}catch(e){console.error("Error checking point in polygon:",e)}})),i.length>0){const e=moment.tz.guess(),t=(moment.tz(e).zoneAbbr(),moment.tz(e).format("Z"),i.map((t=>{let r="";if(t.descriptions&&Array.isArray(t.descriptions)&&t.descriptions.length>0){const e=e=>e?e.replace(/([ABCDEFGQ]\))/g,"<br>$1"):"";r=`\n                  <div class="airspace-descriptions" style="font-size: 0.8em;">\n                      ${t.descriptions.map((t=>`${e(t.airdescription||"")} ${t.airlanguage?`(${t.airlanguage})`:""}`)).join("")}\n                  </div>\n                `}let i="";t.descriptions&&Array.isArray(t.descriptions)&&t.descriptions.length,t.activations&&Array.isArray(t.activations)&&t.activations.length>0&&(i=`\n                  <div class="airspace-activations">\n                    <b>Activations:</b><br>\n                    ${t.activations.map((t=>{const r=moment.utc(t[0]).tz(e),i=moment.utc(t[1]).tz(e);return`${r.format("MMM D, HH:mm z")} - ${i.format("MMM D, HH:mm z")}`})).join("<br>")}\n                  </div>\n                `);const o=(e,t)=>{if(!e)return t||"N/A";const r=e.type,i=e.height;if("FL"===r){return`${Math.round(.3048*i)}m (FL${i/100})`}if("AMSL"===r||"AGL"===r){return`${Math.round(.3048*i)}m`}return t||"N/A"},n=o(t.airlower_j,t.lowerLimit),a=o(t.airupper_j,t.upperLimit);return`\n              <b>${t.name} (${t.airspaceClass})</b><br>\n              <b>↧ </b>${n} - <b>↥ </b>${a}<br>\n              </div>\n                ${r}\n                ${i}\n              </div>\n              `})).join("<hr style='margin: 3px 0;'>"));L.popup({className:"airspace-popup",closeOnClick:!1,autoClose:!1,tap:!1,closeButton:!0}).setLatLng(r).setContent(t).openOn(window.map)}},window.map.on("click",airspaceClickHandler)})).catch((e=>console.error("Error fetching airspaces:",e)))}document.addEventListener("change",(function(e){if(!e.target||"airspaceLowerLimit"!==e.target.id&&"airspaceTime"!==e.target.id||window.map&&window.map._popup&&window.map.closePopup(),e.target&&"airspaceLowerLimit"===e.target.id){const t=parseInt(e.target.value,10);console.log(`Dropdown changed: old limit=${currentLowerLimit}m, new limit=${t}m`),t!==currentLowerLimit&&(currentLowerLimit=t,console.log(`Current limit updated to ${currentLowerLimit}m`),clearTimeout(airspaceDebounceTimer),airspaceDebounceTimer=setTimeout((()=>{window.map.hasLayer(window.airspaceXC)&&(console.log(`Triggering XC airspaces reload with limit=${currentLowerLimit}m`),fetchAirspacesXC())}),300))}if(e.target&&"airspaceTime"===e.target.id){const t=e.target.value;console.log("Selected airspace date:",t),t!==selectedDateStr&&(selectedDateStr=t,clearTimeout(airspaceDebounceTimer),airspaceDebounceTimer=setTimeout((()=>{window.map.hasLayer(window.airspaceXC)&&(console.log("Refetching airspaces with new date:",selectedDateStr),fetchAirspacesXC())}),300))}})),window.fetchAirspacesXC=fetchAirspacesXC;