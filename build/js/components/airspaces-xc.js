import moment from"moment";import"moment-timezone";import*as turf from"@turf/turf";let airspaceDebounceTimer,airspacePopupOpenListener=null,currentLowerLimit=3e3,selectedDateStr=getCurrentDateStr(),allLoadedAirspaces=[];function getCurrentDateStr(){const e=new Date;return`${e.getFullYear()}-${(e.getMonth()+1).toString().padStart(2,"0")}-${e.getDate().toString().padStart(2,"0")}`}function getLimitMeters(e){if(!e)return null;switch(e.type){case"FL":case"AMSL":case"AGL":return.3048*e.height;default:return null}}function generateAirspacePopupHtml(e){const t=moment.tz.guess();let r="";if(e.descriptions&&Array.isArray(e.descriptions)&&e.descriptions.length>0){const t=e=>e?e.replace(/([ABCDEFGQ]\))/g,"<br>$1"):"";r=`\n      <div class="airspace-descriptions" style="font-size: 0.8em;">\n          ${e.descriptions.map((e=>`${t(e.airdescription||"")} ${e.airlanguage?`(${e.airlanguage})`:""}`)).join("")}\n      </div>\n    `}let i="";e.activations&&Array.isArray(e.activations)&&e.activations.length>0&&(i=`\n      <div class="airspace-activations">\n        <b>Activations:</b><br>\n        ${e.activations.map((e=>{const r=moment.utc(e[0]).tz(t),i=moment.utc(e[1]).tz(t);return`${r.format("MMM D, HH:mm z")} - ${i.format("MMM D, HH:mm z")}`})).join("<br>")}\n      </div>\n    `);const o=(e,t)=>{if(!e)return t||"N/A";const r=e.type,i=e.height;if("FL"===r){return`${Math.round(.3048*i)}m (FL${i/100})`}if("AMSL"===r||"AGL"===r){return`${Math.round(.3048*i)}m`}return t||"N/A"},a=o(e.airlower_j,e.lowerLimit),n=o(e.airupper_j,e.upperLimit);moment.tz(t).zoneAbbr(),moment.tz(t).format("Z");return`\n    <div class="airspace-detail">\n      <b>${e.name} (${e.airspaceClass})</b><br>\n      <b>↧ </b>${a} - <b>↥ </b>${n}<br>\n      ${r}\n      ${i}\n    </div>\n  `}function fetchAirspacesXC(){if(!window.map)return void console.error("Map not initialized yet");const e=window.map.getZoom();if(e<5)return console.log(`[AirspaceXC] Zoom level ${e} is below minimum (5), clearing layer and skipping fetch.`),window.airspaceXC&&window.airspaceXC.clearLayers(),void(allLoadedAirspaces=[]);const t=window.map.getCenter(),r=(t.lat.toFixed(6),t.lng.toFixed(6),window.map.getBounds()),i=r.getNorthWest(),o=r.getSouthEast(),a=`/api/airspacesXCdb?startDate=${selectedDateStr}&nw_lat=${i.lat.toFixed(6)}&nw_lng=${i.lng.toFixed(6)}&se_lat=${o.lat.toFixed(6)}&se_lng=${o.lng.toFixed(6)}`;fetch(a).then((e=>e.json())).then((e=>{window.airspaceXC.clearLayers(),allLoadedAirspaces=[],airspacePopupOpenListener&&(window.map.off("popupopen",airspacePopupOpenListener),airspacePopupOpenListener=null);const t=e.features||[],r=Intl.DateTimeFormat().resolvedOptions().timeZone,i=moment.tz(selectedDateStr,"YYYY-MM-DD",r).startOf("day").utc().toDate();t.forEach((e=>{if(e.geometry&&"Polygon"===e.geometry.type){if(e.properties.name&&e.properties.name.startsWith("V00"))return;const t=getLimitMeters(e.properties.airlower_j);if(null===t||t>currentLowerLimit)return;let o=!1;if(e.properties.descriptions&&Array.isArray(e.properties.descriptions))for(const t of e.properties.descriptions){const e=(t.airdescription||"").match(/C\)\s*(\d{10})/);if(e&&e[1])try{const t=2e3+parseInt(e[1].substring(0,2)),r=parseInt(e[1].substring(2,4))-1,a=parseInt(e[1].substring(4,6)),n=parseInt(e[1].substring(6,8)),s=parseInt(e[1].substring(8,10));if(new Date(Date.UTC(t,r,a,n,s))<i){o=!0;break}}catch(e){console.error("Error parsing expiration date:",e)}}if(o)return;let a=!1;if(e.properties.activations&&Array.isArray(e.properties.activations)&&e.properties.activations.length>0){const t=moment.tz(selectedDateStr,"YYYY-MM-DD",r).endOf("day").utc().toDate();for(const r of e.properties.activations){const e=new Date(r[0]),o=new Date(r[1]);if(e<=t&&o>=i){a=!0;break}}if(!a)return}if("R"===e.properties.airspaceClass){let t=!1;if(e.properties.descriptions&&Array.isArray(e.properties.descriptions))for(const r of e.properties.descriptions)if((r.airdescription||"").match(/C\)\s*(\d{10})/)){t=!0;break}if(!t&&!a)return}const n=e.geometry.coordinates[0].map((e=>[e[1],e[0]])),s=L.polygon(n,{color:e.properties.strokeColor||"blue",weight:e.properties.strokeWeight||2,fillColor:e.properties.fillColor||"blue",fillOpacity:e.properties.fillOpacity||.3});s.bindPopup(`<b>${e.properties.name}</b><br><i>Loading details...</i>`,{className:"airspace-popup"}),allLoadedAirspaces.push({polygon:s,data:e.properties,geometry:e.geometry}),window.airspaceXC.addLayer(s)}})),airspacePopupOpenListener=function(e){const t=e.popup;if(!(t&&t.options&&t.options.className&&t.options.className.includes("airspace-popup")))return;const r=e.layer,i=t.getLatLng();if(!i)return;const o=[],a=turf.point([i.lng,i.lat]);if(allLoadedAirspaces.forEach((({data:e,geometry:t},r)=>{try{const r=turf.polygon(t.coordinates);turf.booleanPointInPolygon(a,r)&&o.push(e)}catch(e){console.error(`[AirspaceXC] Error checking point in polygon for index ${r}:`,e)}})),o.length>0){const e=o.map((e=>generateAirspacePopupHtml(e))).join("<hr style='margin: 5px 0; border-top: 1px solid #ccc;'>");t.setContent(e)}else{const e=allLoadedAirspaces.find((e=>e.polygon===r));e?t.setContent(generateAirspacePopupHtml(e.data)):(console.error("[AirspaceXC popupopen Listener - Attempt 13] Could not find data for the opened layer!"),t.setContent("Error: Could not find airspace details."))}},window.map.on("popupopen",airspacePopupOpenListener),console.log("[AirspaceXC] popupopen listener attached to MAP.")})).catch((e=>console.error("Error fetching airspaces:",e)))}function initializeAirspaceXCMapListeners(e){e?(e.on("zoomend",(function(){window.airspaceXC&&e.hasLayer(window.airspaceXC)&&(console.log("[AirspaceXC] Map zoom ended, re-fetching airspaces based on new zoom level."),clearTimeout(airspaceDebounceTimer),airspaceDebounceTimer=setTimeout((()=>{fetchAirspacesXC()}),150))})),console.log("[AirspaceXC] zoomend listener attached to map."),e.on("popupopen",airspacePopupOpenListener),console.log("[AirspaceXC] popupopen listener attached to MAP via initializer.")):console.error("[AirspaceXC] Invalid map instance provided to initializeAirspaceXCMapListeners.")}document.addEventListener("change",(function(e){if(!e.target||"airspaceLowerLimit"!==e.target.id&&"airspaceTime"!==e.target.id||window.map&&window.map._popup&&window.map.closePopup(),e.target&&"airspaceLowerLimit"===e.target.id){const t=parseInt(e.target.value,10);t!==currentLowerLimit&&(currentLowerLimit=t,clearTimeout(airspaceDebounceTimer),airspaceDebounceTimer=setTimeout((()=>{window.map.hasLayer(window.airspaceXC)&&fetchAirspacesXC()}),300))}if(e.target&&"airspaceTime"===e.target.id){const t=e.target.value;t!==selectedDateStr&&(selectedDateStr=t,clearTimeout(airspaceDebounceTimer),airspaceDebounceTimer=setTimeout((()=>{window.map.hasLayer(window.airspaceXC)&&fetchAirspacesXC()}),300))}}));export{fetchAirspacesXC,initializeAirspaceXCMapListeners};window.fetchAirspacesXC=fetchAirspacesXC;