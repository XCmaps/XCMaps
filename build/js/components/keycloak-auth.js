import Keycloak from"keycloak-js";const keycloak=new Keycloak({url:`${window.location.origin}/auth`,realm:"master",clientId:"xcmaps-client"});let isAuthenticated=!1,userProfile=null;const initKeycloak=()=>(console.log("Initializing Keycloak..."),new Promise(((e,o)=>{try{keycloak.init({onLoad:"check-sso",silentCheckSsoRedirectUri:null,checkLoginIframe:!1}).then((o=>{if(console.log("Keycloak initialized, authenticated:",o),isAuthenticated=o,o)return keycloak.loadUserProfile();e(o)})).then((o=>{o&&(userProfile=o,updateUserIcon(!0)),e(isAuthenticated)})).catch((o=>{console.error("Failed to initialize Keycloak:",o),e(!1)}))}catch(o){console.error("Error in initKeycloak:",o),e(!1)}}))),login=()=>{console.log("Login clicked - redirecting to Keycloak login");try{keycloak.onAuthSuccess=function(){console.log("Authentication successful"),isAuthenticated=!0,keycloak.loadUserProfile().then((e=>{userProfile=e,updateUserIcon(!0)}))},keycloak.login()}catch(e){console.error("Error during login:",e),alert("Error during login. Please try again later.")}};function getCurrentMapState(e){if(!e||!e.getContainer)return console.warn("Layer control not available for getting map state."),{selectedBaseLayer:null,selectedOverlays:[]};const o=e.getContainer();let t=null;const n=[];o.querySelectorAll('.leaflet-control-layers-base input[type="radio"]').forEach((e=>{if(e.checked){let o=e.closest("label")||e.parentElement.querySelector("span");o&&o.textContent.trim()&&(t=o.textContent.trim(),console.log("Found selected base layer label:",t))}}));return o.querySelectorAll('.leaflet-control-layers-overlays input[type="checkbox"]').forEach((e=>{if(e.checked){let o=e.closest("label")||e.parentElement.querySelector("span");if(o&&o.textContent.trim()){const e=o.textContent.trim();["Rain Viewer","Thermals","Spots"].includes(e)?console.log("Skipping potential parent label:",e):(console.log("Found checked overlay layer label:",e),n.push(e))}}})),console.log("Current map state:",{selectedBaseLayer:t,selectedOverlays:n}),{selectedBaseLayer:t,selectedOverlays:n}}const logout=async()=>{if(console.log("Logout clicked - attempting to save preferences..."),isAuthenticated&&keycloak.hasRealmRole("user")){console.log("User is authenticated and has 'user' role. Saving preferences.");try{const e=getCurrentMapState(window.treeLayersControl),o={selectedBaseLayer:e.selectedBaseLayer,selectedOverlays:e.selectedOverlays};console.log("Sending preferences to save:",o);const t=await fetch("/api/user/preferences",{method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${keycloak.token}`},body:JSON.stringify(o)});t.ok?console.log("Preferences saved successfully (including empty state if applicable)."):console.error(`Failed to save preferences: ${t.status} ${t.statusText}`)}catch(e){console.error("Error saving user preferences:",e)}}else console.log("User not logged in or does not have 'user' role. Skipping preference saving.");console.log("Proceeding with Keycloak logout...");try{const e=window.location.origin;isAuthenticated=!1,userProfile=null,keycloak.logout({redirectUri:e})}catch(e){console.error("Error during logout:",e),isAuthenticated=!1,userProfile=null,updateUserIcon(!1);const o=document.getElementById("profile-badge");o&&o.remove()}},isUserAuthenticated=()=>isAuthenticated,getUserProfile=()=>userProfile,updateUserIcon=e=>{console.log("Updating user icon, authenticated:",e),setTimeout((()=>{const o=document.querySelector(".user-icon-container");o?(console.log("Found user icon container, updating image"),e?(o.innerHTML='\n          <img id="user-control-icon" src="/assets/images/user-active.svg" width="30" height="30" alt="User (logged in)" />\n        ',console.log("Set active user icon")):(o.innerHTML='\n          <svg id="user-control-icon" xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 256 256" xml:space="preserve">\n            <g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;" transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)">\n              <path d="M 45 0 C 20.147 0 0 20.147 0 45 c 0 24.853 20.147 45 45 45 s 45 -20.147 45 -45 C 90 20.147 69.853 0 45 0 z M 45 22.007 c 8.899 0 16.14 7.241 16.14 16.14 c 0 8.9 -7.241 16.14 -16.14 16.14 c -8.9 0 -16.14 -7.24 -16.14 -16.14 C 28.86 29.248 36.1 22.007 45 22.007 z M 45 83.843 c -11.135 0 -21.123 -4.885 -27.957 -12.623 c 3.177 -5.75 8.144 -10.476 14.05 -13.341 c 2.009 -0.974 4.354 -0.958 6.435 0.041 c 2.343 1.126 4.857 1.696 7.473 1.696 c 2.615 0 5.13 -0.571 7.473 -1.696 c 2.083 -1 4.428 -1.015 6.435 -0.041 c 5.906 2.864 10.872 7.591 14.049 13.341 C 66.123 78.957 56.135 83.843 45 83.843 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"/>\n            </g>\n          </svg>\n        ',console.log("Set default user icon"))):console.error("User icon container not found")}),500)},createUserControl=()=>{try{if(console.log("Creating user control..."),!window.map)return console.error("Map not initialized yet, cannot add user control"),void setTimeout(createUserControl,1e3);if(document.getElementById("user-control"))return void console.log("User control already exists, not creating again");L.Control.UserControl=L.Control.extend({onAdd:function(e){console.log("Adding user control to map");const o=L.DomUtil.create("div","leaflet-control-user");o.id="user-control";L.DomUtil.create("div","user-icon-container",o);return updateUserIcon(isAuthenticated),L.DomEvent.on(o,"click",(function(e){L.DomEvent.stopPropagation(e),isAuthenticated?showProfileBadge(o):login()})),o}}),L.control.userControl=function(e){return new L.Control.UserControl(e)};const e=L.control.userControl({position:"topright"});return e.addTo(window.map),console.log("User control added to map"),e}catch(e){console.error("Error creating user control:",e)}},showProfileBadge=e=>{const o=document.getElementById("profile-badge");if(o)return void o.remove();const t=document.createElement("div");t.id="profile-badge",t.className="profile-badge",t.innerHTML=`\n    <div class="profile-info">\n      <div class="profile-name">${userProfile?userProfile.username:"User"}</div>\n      ${userProfile&&userProfile.email?`<div class="profile-email">${userProfile.email}</div>`:""}\n    </div>\n    <div class="profile-actions">\n      <button id="logout-button" class="logout-button">Logout</button>\n    </div>\n  `,e.appendChild(t);const n=document.getElementById("logout-button");n&&L.DomEvent.on(n,"click",(function(e){L.DomEvent.stopPropagation(e),logout()}));const r=e=>{const o=document.getElementById("profile-badge"),t=document.getElementById("user-control");o&&t&&!t.contains(e.target)&&(o.remove(),document.removeEventListener("click",r))};setTimeout((()=>{document.addEventListener("click",r)}),100)},loadUserPreferences=async()=>{if(!isAuthenticated||!keycloak.hasRealmRole("user"))return console.log("User not logged in or not 'user' role. Skipping preference loading."),!1;console.log("User is authenticated 'user'. Loading preferences...");try{const e=await fetch("/api/user/preferences",{method:"GET",headers:{Authorization:`Bearer ${keycloak.token}`}});if(!e.ok)return 404===e.status?(console.log("No preferences found for user."),!1):(console.error(`Failed to load preferences: ${e.status} ${e.statusText}`),!1);const o=await e.json();console.log("Received preferences:",o);let t=!1;return o&&window.treeLayersControl&&window.map?(console.log("Applying preferences to layer control:",o),t=applyMapPreferences(o,window.treeLayersControl)):console.log("No preferences found or layer control/map not ready."),t}catch(e){return console.error("Error loading user preferences:",e),!1}};function applyMapPreferences(e,o){if(!(o&&o.getContainer&&window.map&&o._layers))return console.warn("Layer control, map, or internal layer mapping not available for applying preferences."),!1;o.getContainer();const{selectedBaseLayer:t=null,selectedOverlays:n=[]}=e,r=new Set(n);let l=!1;return console.log("Applying Preferences (No Click):"),console.log(" - Base Layer:",t),console.log(" - Overlays:",n),o._layers.forEach((e=>{const o=e.layer,n=e.name?.trim(),s=e.input;if(n&&s)if(e.overlay){const e=r.has(n),t=window.map.hasLayer(o);e&&!t?(console.log(`Adding overlay: ${n}`),window.map.addLayer(o)):!e&&t&&(console.log(`Removing overlay: ${n}`),window.map.removeLayer(o)),s.checked!==e&&(console.log(`Setting checkbox UI for ${n} to ${e}`),s.checked=e)}else{const e=n===t,r=window.map.hasLayer(o);e?(r||(console.log(`Adding base layer: ${n}`),window.map.addLayer(o)),s.checked||(console.log(`Setting radio UI for ${n} to true`),s.checked=!0),l=!0):(r&&(console.log(`Removing base layer: ${n}`),window.map.removeLayer(o)),s.checked&&(console.log(`Setting radio UI for ${n} to false`),s.checked=!1))}else console.warn("Skipping layer due to missing label or input element in control structure:",e)})),t&&!l&&console.warn(`Preferred base layer "${t}" was not found or applied.`),console.log("Finished applying preferences (No Click)."),l}export{initKeycloak,login,logout,isUserAuthenticated,getUserProfile,createUserControl,loadUserPreferences};