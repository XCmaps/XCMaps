let obstacleDebounceTimer,obstacleClickHandler=null,obstacleLayer=L.layerGroup({attribution:'XContest&copy; <a href="https://xcontest.org">XContest</a>'});function fetchObstacles(){if(!window.map)return void console.error("Map not initialized yet");const e=window.map.getBounds(),t=e.getNorthWest(),o=e.getSouthEast(),n=`${process.env.APP_DOMAIN}/api/obstacles?nw_lat=${t.lat}&nw_lng=${t.lng}&se_lat=${o.lat}&se_lng=${o.lng}`;obstacleLayer.clearLayers(),fetch(n).then((e=>e.json())).then((e=>{const t=[];e.features.forEach((e=>{if("LineString"===e.geometry.type){const o=e.geometry.coordinates.map((e=>[e[1],e[0]])),n=L.polyline(o,{color:e.properties.strokeColor||"#ff0000",weight:e.properties.strokeWeight||2});t.push({polyline:n,data:e.properties}),n.addTo(obstacleLayer),n.bindPopup((()=>{const t=[];return e.properties.name&&t.push(`<b>${e.properties.name}</b>`),e.properties.type&&t.push(`Type: ${e.properties.type}`),e.properties.description&&t.push(`Description: ${e.properties.description}`),e.properties.maxAgl&&t.push(`Max AG: ${e.properties.maxAgl}m`),t.join("<br>")}))}})),console.log(`Added ${t.length} obstacles to the map`),obstacleClickHandler&&window.map.off("click",obstacleClickHandler),obstacleClickHandler=function(e){if(!window.map.hasLayer(obstacleLayer))return;const o=e.latlng,n=[];if(t.forEach((({polyline:e,data:t})=>{e.getBounds().contains(o)&&n.push(t)})),n.length>0){const e=n.map((e=>`\n            ${e.name?`<b>${e.name}</b><br>`:""}\n            ${e.type?`Type: ${e.type}<br>`:""}\n            ${e.description?`Description: ${e.description}<br>`:""}\n            ${e.maxAgl?`Max AG: ${e.maxAgl}m<br>`:""}\n          `)).join("<hr>");L.popup().setLatLng(o).setContent(e).openOn(window.map)}},window.map.on("click",obstacleClickHandler)})).catch((e=>console.error("Error fetching obstacles:",e)))}window.obstacleLayer=obstacleLayer,window.fetchObstacles=fetchObstacles;